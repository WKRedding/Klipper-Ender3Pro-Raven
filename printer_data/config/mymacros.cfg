[pause_resume]


[gcode_macro M0]
description: Unconditional Stop
gcode:
  Pause


[gcode_macro update_git]
description: Back-up all config files to Github account.
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}


[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True


[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True


[gcode_macro HOME_AND_CENTER]
description: Do you really need a description? Come on!
gcode: 
  G28 # home all axes
  G1 X100 Y100 Z50 F3000 #move nozzle to center of bed

  
[gcode_macro PLA+]
description: Use for starting printer before PLA+ filament
gcode:
    G92 E0 # Reset Extruder
    G90 # use Absolute Positioning 
    G28 # Home all axes
    BED_MESH_PROFILE LOAD=default
    M190 S65
    M109 S210
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 # Move to start position
    G1 X5 Y200.0 Z0.3 F1500.0 E15 # Draw the first line
    G1 X5.2 Y200.0 Z0.3 F5000.0 # Move to side a little
    G1 X5.2 Y20 Z0.3 F1500.0 E30 # Draw the second line
    G92 E0 # Reset Extruder
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X6 Y20 Z0.3 F5000.0 # Move over to prevent blob squish


[gcode_macro PLA_Tough]
description: Use before starting to print PLA Tough filament
gcode:
    G92 E0 # Reset Extruder
    G90 # use Absolute Positioning 
    G28 # Home all axes
    BED_MESH_PROFILE LOAD=default
    M190 S70
    M109 S215
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 # Move to start position
    G1 X5 Y200.0 Z0.3 F1500.0 E15 # Draw the first line
    G1 X5.2 Y200.0 Z0.3 F5000.0 # Move to side a little
    G1 X5.2 Y20 Z0.3 F1500.0 E30 # Draw the second line
    G92 E0 # Reset Extruder
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X6 Y20 Z0.3 F5000.0 # Move over to prevent blob squish


[gcode_macro PLA]
description: Use before starting to print PLA  filament
gcode:
    G92 E0 # Reset Extruder
    G90 # use Absolute Positioning 
    G28 # Home all axes
    BED_MESH_PROFILE LOAD=default
    M190 S60
    M109 S200
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 # Move to start position
    G1 X5 Y200.0 Z0.3 F1500.0 E15 # Draw the first line
    G1 X5.2 Y200.0 Z0.3 F5000.0 # Move to side a little
    G1 X5.2 Y20 Z0.3 F1500.0 E30 # Draw the second line
    G92 E0 # Reset Extruder
    G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X6 Y20 Z0.3 F5000.0 # Move over to prevent blob squish

    
[gcode_macro END_PRINT]
description: Should move the extruder and present the print
gcode:
    G91 ;Relative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z10 ;Raise Z more
    G90 ;Absolute positioning
    G1 X0 Y230 ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    M84 X Y E ;Disable all steppers but Z


[gcode_macro BLTCALIBRATE]
description: For calibrating the Z offset. Get your paper ready!
gcode:
    G28
    M190 S60
    M109 S200
    probe_calibrate


[gcode_macro CHANGE_FILAMENT]
description: Change filament (M600)
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    SET_IDLE_TIMEOUT TIMEOUT=7200
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PIDHOTEND]
description: This tunes the temp for the hotend
gcode:
	{% set TEMP = params.TEMP|default(200)|float %}
	PID_CALIBRATE HEATER=extruder TARGET={TEMP}


[gcode_macro PIDBED]
description: This tunes the temp for the bed
gcode:
    {% set TEMP = params.TEMP|default(60)|float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}


[gcode_macro CLEAN_THE_BED]
description: Clean and prep the bed between prints
gcode:
  G28  ;Home all Axes
  M190 S60  ;Set bed temperature and wait
  G0 Z100 F3000  ;Move Up
  G0 X115 Y225 F3000  ;Move XY
  M117 Clean me please.


#[gcode_macro bed_mesh_calibrate]
#rename_existing: _KM_BED_MESH_CALIBRATE_BASE
#description: Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.
#  Usage: See Klipper documentation.
#gcode:
#  BED_MESH_CALIBRATE_FAST{%for k in params%}{' '~k~'="'~params[k]~'"'}{%endfor%}


[gcode_macro BED_MESH]
description: Your guess is as good as mine
gcode:
  BED_MESH_CALIBRATE

[gcode_macro _load_unload]
gcode:
  {% set saved_extruder = printer.toolhead.extruder %}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set km = printer["gcode_macro _km_globals"] %}
  # Use the global min as default if provided, else use per extruder min + 5.
  {% set default_minimum = km.load_min_temp if km.load_min_temp else
         (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
  # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
          printer["gcode_macro resume"].saved_extruder_temp %}
    {% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
  # Use the target temp if higher than the default.
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set MINIMUM = printer[EXTRUDER].target %}
  {% else %}
    {% set MINIMUM = default_minimum %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}
  {% set SPEED = params.SPEED|default(km.load_speed)|int %}
  {% set priming_length = km.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
  {% if EXTRUDER != saved_extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}
  _KM_PRINT_STATUS ACTION=PUSH_STATUS
  {% if not printer.extruder.can_extrude or
        printer[EXTRUDER].target < default_minimum %}
    {action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
    M109 S{MINIMUM}
  {% endif %}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
    if params.LOAD|int else "filament_unload"}
  M83
  {% set priming_speed = (km.load_priming_speed, SPEED)|min %}
  {% if params.LOAD|int %}
    G0 E{LENGTH} F{SPEED}
    G0 E{priming_length} F{priming_speed}
    G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
  {% else %}
    {% set pre_prime_distance = 5.0 %}
    {% set shaping_moves = 5 %}
    {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    # Push forward to heat up, then retract to the edge of the meltzone.
    G0 E{pre_prime_distance} F{SPEED}
    G4 P500
    G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    # Shape the tip with a pairs of short extrusions and retractions, where
    # the retractions get increasingly longer than the extrusion.
    {% for i in range(1, shaping_moves + 1) %}
      G0 E2 F{priming_speed}
      G0 E-{2 + (0.1 * i)} F{priming_speed}
    {% endfor %}
    # Retract the rest of the length.
    G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
  {% endif %}
  RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD

  # Beep on completion
  _KM_BEEP_IF_AVAILABLE BEEPS={params.BEEPS|default(8)}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status


# TODO: Fix casing after front-ends get fixed
[gcode_macro LOAD_FILAMENT]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                       [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                       [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=1{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail


# TODO: Fix casing after front-ends get fixed
[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                         [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                         [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=0{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(default extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail


[gcode_macro _pause_inner_m700]
gcode:
  {% set extruder = "extruder" ~ params.T|replace('0', '')
     if "T" in params else printer.toolhead.extruder %}
  {% if extruder != printer.toolhead.extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={extruder}
  {% endif %}

  {% set z_param = (' Z="%f"' % params.Z) if 'Z' in params else "" %}

  {% if printer.idle_timeout.state|string == "Printing" %}
    PAUSE B="{0}" P=2{z_param}
  {% elif not printer.pause_resume.is_paused%}
    PARK B="{0}" P=2{z_param}
  {% endif %}


[gcode_macro m701]
description: Pauses/parks the toolhead then loads filament to the extruder.
  Usage: M701 [L<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'U' in params %}
    {% if not 'L' in params %}
      RESPOND TYPE=error MSG="Argument \"U\" substituted for missing \"L\"."
      {% set dummy = params.__setitem__("L", params.U) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"U\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
  LOAD_FILAMENT BEEPS="{10}" LENGTH={
    params.L|default(printer["gcode_macro _km_globals"].load_length)|float}


[gcode_macro m702]
description: Pauses/parks the toolhead then unloads filament from the extruder.
  Usage: M702 [U<distance>] [Z<pos>] [T<extruder>]
gcode:
  {% if 'L' in params %}
    {% if not 'U' in params %}
      RESPOND TYPE=error MSG="Argument \"L\" substituted for missing \"U\"."
      {% set dummy = params.__setitem__("U", params.L) %}
    {% else %}
      RESPOND TYPE=error MSG="Invalid argument \"L\" ignored."
    {% endif %}
  {% endif %}

  _PAUSE_INNER_M700 {% for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
  UNLOAD_FILAMENT BEEPS="{10}" LENGTH={
    params.U|default(printer["gcode_macro _km_globals"].load_length)|float}


[gcode_macro _CURA_SET_PRINT_STATS_INFO]
gcode:
  {% if params.LAYER_COUNT is defined %}
    SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}
  {% endif %}
  {% if params.LAYER is defined %}
    SET_PRINT_STATS_INFO CURRENT_LAYER={(params.LAYER | int) + 1}
  {% endif %}
  

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESUME_BASE {get_params}  


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE




  
#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 10.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 10.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 5.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : "filament_switch_sensor switch_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode:

#[gcode_macro FILAMENT_LOAD]
#gcode:
# M83                   # Put the extruder into relative mode
# G92 E0.0              # Reset the extruder so that it thinks it is at position zero
# G1 E120 F350          # Move the extruder forward 120mm at a speed of 350mm/minute
# G92 E0.0              # Reset the extruder again
# M82                   # Put the extruder back into absolute mode.

# [gcode_macro FILAMENT_UNLOAD]
#gcode:
# M83                   # Put the extruder into relative mode
# G92 E0.0              # Reset the extruder so that it thinks it is at position zero
# G1 E-120 F350          # Move the extruder backwards 120mm at a speed of 350mm/minute
# G92 E0.0              # Reset the extruder again
# M82                   # Put the extruder back into absolute mode.

 # Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

